# build
FILES[] =
	module
	binding
	closureTrans
	codegen
	override
	main

PROGRAM=../codegen

OCAMLOPT   = ocamlopt -for-pack $(capitalize $(basename $(PROGRAM)))
OCAMLOPTLINK= ocamlopt

# test
OUNIT_LIBS+=astUtil

OUnitTest(closureTrans , closureTrans module)
OUnitTest(codegenExpr  , codegen)
OUnitTest(codegenStmt  , codegen)
OUnitTest(codegenClass , codegen)
OUnitTest(override     , override binding module)
OUnitTest(module       , module)
OUnitTest(binding      , binding module)

# phony
.PHONY: clean
.DEFAULT: $(OCamlPackage $(PROGRAM), $(FILES))


match_body.h: gen_inst$(EXE) instruction.txt
    ./gen_inst$(EXE) -m < instruction.txt > $@

opcode.h: gen_inst$(EXE) instruction.txt
    ./gen_inst$(EXE) -t < instruction.txt > $@

.SCANNER: instruction.ml : instruction.mlp
    grep "#include \"" $< | sed 's/.*"\(.*\)".*/'$@': \1/'

clean:
	ocaml-clean opcode.h match_body.h instruction.ml gen_inst$(EXE)
