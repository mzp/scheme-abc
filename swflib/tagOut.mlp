open Base
open SwfBaseOut

type color = {r:int; g:int; b:int}
let byte_color {r;g;b} =
  [ `RGB(r,g,b) ]

let byte_string s =
  [ `Str s ]

type u32 = int32
let byte_u32 n =
  [ `Ui32 n]
type abc = int list
let byte_abc abc =
  List.map (fun n -> `Ui8 n) abc

type file_attrs = {is_metadat:bool; is_as3:bool; use_network:bool}
let byte_file_attrs {is_metadat; is_as3; use_network} = [
  `Bits [
    UB(3 , 0);
    UB(1 , if is_metadat then 1 else 0);
    UB(1 , if is_as3 then 1 else 0);
    UB(2 , 0);
    UB(1 , if use_network then 1 else 0);
    UB(24, 0)
  ]]

type symbol_class = (int*string) list
let byte_symbol_class xs =
  `Ui16 (List.length xs)::HList.concat_map (fun(id,name)-> [`Ui16 id; `Str name]) xs

type t = [
#include "type.tag.h"
]

let to_base = function
#include "tag.tag.h"
