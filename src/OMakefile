.PHONY: clean

################################################
#
# This project requires ocamlfind
#
USE_OCAMLFIND = true

OCAMLPACKS[] =
     extlib


if $(not $(OCAMLFIND_EXISTS))
   eprintln('This project requires ocamlfind, but is was not found.')
   eprintln('You need to install ocamlfind and run "omake --configure".')
   exit 1

#
# Include path
#
# OCAMLINCLUDES +=

#
# Compile native or byte code? 
#
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = true

#
# Various options
#
OCAMLFLAGS    += -g
OCAMLPPFLAGS   += -pp 'camlp4o'
OCAMLDEPFLAGS  += $(OCAMLPPFLAGS)


################################################
# Build an OCaml program
#

FILES[] =
	abc
	asm
	ast
	ast2
	base
	bytes
	closureTrans
	closTrans
	codegen
	cpool
	hList
	instruction
	label
	lexer
	lisp
	parsec
	sexp
	pSet
	tuple
	node

PROGRAM = habc-scm
# OCAML_OTHER_LIBS +=

.DEFAULT: $(OCamlProgram $(PROGRAM), main $(FILES))

OCamlLibrary($(PROGRAM), $(FILES))

################################################
#
# additonal rules
#

%.ml: %.mlp match_body.ml opcode.ml
    @rm -f $@
    @echo "(* CAUTION: this is a generated file.  If you edit it, all changes will be lost! *)" > $@
    $(CPP) $*.mlp >> $@
    @chmod 444 $@


match_body.ml: ../util/instruction ../util/instruction.txt
    ../util/instruction -m < ../util/instruction.txt > $@
    ../util/instruction -s < ../util/instruction.txt >> $@

opcode.ml: ../util/instruction ../util/instruction.txt
    ../util/instruction -t < ../util/instruction.txt > $@

clean:
	rm -f  $(PROGRAM) *.cm[iox] *.o *.omc *.opt *.run *~ match_body.ml opcode.ml instruction.ml
